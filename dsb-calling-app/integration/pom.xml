<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>dsb-calling-app</artifactId>
        <groupId>com.cisco</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <modelVersion>4.0.0</modelVersion>
    <version>1.0-SNAPSHOT</version>
    <packaging>jar</packaging>
    <artifactId>dsb-calling-app-integration</artifactId>

    <dependencies>
        <dependency>
            <groupId>com.cisco</groupId>
            <artifactId>dsb-calling-app-client</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>com.cisco</groupId>
            <artifactId>dsb-calling-app-server</artifactId>
            <version>1.0-SNAPSHOT</version>
            <type>war</type>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testng</groupId>
            <artifactId>testng</artifactId>
        </dependency>
        <dependency>
            <groupId>com.cisco.wx2</groupId>
            <artifactId>core-test</artifactId>
        </dependency>
        <dependency>
            <groupId>javax.sip</groupId>
            <artifactId>jain-sip-ri</artifactId>
            <version>1.3.0-91</version>
        </dependency>
        <dependency>
            <groupId>org.cafesip.sipunit</groupId>
            <artifactId>sipunit</artifactId>
            <version>2.0.0</version>
        </dependency>
        <!-- com.ciscospark.integration.TestNGRunner main class to begin execution for the jar is located in here -->
        <dependency>
            <groupId>com.ciscospark</groupId>
            <artifactId>cisco-spark-integration</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
        </dependency>
    </dependencies>

    <properties>
        <tomcat.server.port>9221</tomcat.server.port>
        <tomcat.ajp.port>9222</tomcat.ajp.port>
        <tomcat.rmi.port>9223</tomcat.rmi.port>
        <dhruvaPublicUrl>http://localhost:${tomcat.server.port}/api/v1</dhruvaPublicUrl>
    </properties>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <!-- failsafe plugin runs integration tests in the 'integration-test' phase -->
                <executions>
                    <execution>
                        <id>integration-tests</id>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <!--<argLine>-XX:+AllowRedefinitionToAddDeleteMethods</argLine>-->
                    <testClassesDirectory>${project.build.outputDirectory}</testClassesDirectory>
                    <testSourceDirectory>${project.build.sourceDirectory}</testSourceDirectory>
                    <environmentVariables>
                        <dhruvaPublicUrl>${dhruvaPublicUrl}</dhruvaPublicUrl>
                    </environmentVariables>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.codehaus.cargo</groupId>
                <artifactId>cargo-maven2-plugin</artifactId>
                <version>${cargo.maven2.plugin.version}</version>
                <configuration>
                    <container>
                        <containerId>tomcat9x</containerId>
                        <artifactInstaller>
                            <groupId>org.apache.tomcat</groupId>
                            <artifactId>tomcat</artifactId>
                            <version>${tomcat.version}</version>
                        </artifactInstaller>
                        <systemProperties>
                            <!-- The following properties are required to disable the creation of redis cache (which is not needed for IT execution)
                            i.e if we dont have a redis instance running, the app startup will fail -->
                            <enableLettuceRedisDataSourceForUserToGroups>false</enableLettuceRedisDataSourceForUserToGroups>
                            <enableLettuceRedisDataSourceForUserCache>false</enableLettuceRedisDataSourceForUserCache>
                            <enableLettuceRedisDataSourceForOrgCache>false</enableLettuceRedisDataSourceForOrgCache>
                            <enableLettuceRedisDataSourceForAuthCache>false</enableLettuceRedisDataSourceForAuthCache>
                            <spring.profiles.active>it</spring.profiles.active>
                        </systemProperties>
                    </container>
                    <configuration>
                        <type>standalone</type>
                        <properties>
                            <cargo.servlet.port>${tomcat.server.port}</cargo.servlet.port>
                            <cargo.rmi.port>${tomcat.rmi.port}</cargo.rmi.port>
                            <cargo.tomcat.ajp.port>${tomcat.ajp.port}</cargo.tomcat.ajp.port>
                            <cargo.jvmargs>
                                -javaagent:${user.home}/.m2/repository/org/jacoco/org.jacoco.agent/${jacoco.version}/org.jacoco.agent-${jacoco.version}-runtime.jar=destfile=${project.build.directory}/jacoco-it.exec,append=true
                            </cargo.jvmargs>
                        </properties>
                    </configuration>
                    <deployables>
                        <deployable>
                            <groupId>com.cisco</groupId>
                            <artifactId>dsb-calling-app-server</artifactId>
                            <type>war</type>
                            <properties>
                                <context>/</context>
                            </properties>
                            <pingUrlPath>/ping</pingUrlPath>
                        </deployable>
                    </deployables>
                </configuration>
                <executions>
                    <execution>
                        <id>start-container</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>start</goal>
                        </goals>
                        <configuration>
                            <skip>${skipITs}</skip>
                            <container>
                                <timeout>300000</timeout>
                            </container>
                        </configuration>
                    </execution>
                    <execution>
                        <id>stop-container</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>stop</goal>
                        </goals>
                        <configuration>
                            <skip>${skipITs}</skip>
                            <container>
                                <timeout>300000</timeout>
                            </container>
                        </configuration>
                    </execution>
                </executions>
                <dependencies>
                    <dependency>
                        <groupId>org.jacoco</groupId>
                        <artifactId>org.jacoco.agent</artifactId>
                        <classifier>runtime</classifier>
                        <version>${jacoco.version}</version>
                    </dependency>
                </dependencies>
            </plugin>

            <!--Create a shaded jar that contains the integration tests so they can be run independently from
                maven. By changing properties, like helloWorldApiUrl, the tests can be configured to run against
                different environments. E.g. integration, production and load test.-->
            <!--A simple test runner that is used to run JUnit based integration tests that have been shaded into a jar.-->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <mainClass>com.ciscospark.integration.TestNGRunner</mainClass>
                    <finalName>dsb-calling-integration-tests</finalName>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>