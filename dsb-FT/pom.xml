<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <parent>
    <artifactId>dhruva-sip-base</artifactId>
    <groupId>com.cisco</groupId>
    <version>1.0-SNAPSHOT</version>
  </parent>
  <modelVersion>4.0.0</modelVersion>

  <artifactId>dsb-FT</artifactId>
  <packaging>jar</packaging>

  <dependencies>
    <dependency>
      <groupId>com.cisco</groupId>
      <artifactId>sample-app</artifactId>
      <version>1.0-SNAPSHOT</version>
      <type>war</type>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.testng</groupId>
      <artifactId>testng</artifactId>
    </dependency>
    <dependency>
      <groupId>com.cisco.wx2</groupId>
      <artifactId>core-test</artifactId>
    </dependency>
    <dependency>
      <groupId>javax.sip</groupId>
      <artifactId>jain-sip-ri</artifactId>
      <version>1.3.0-91</version>
    </dependency>
    <dependency>
      <groupId>org.cafesip.sipunit</groupId>
      <artifactId>sipunit</artifactId>
      <version>2.0.0</version>
    </dependency>
    <dependency>
      <groupId>com.googlecode.json-simple</groupId>
      <artifactId>json-simple</artifactId>
      <version>1.1.1</version>
      <scope>compile</scope>
    </dependency>
  </dependencies>

  <properties>
    <tomcat.server.port>9221</tomcat.server.port>
    <tomcat.ajp.port>9222</tomcat.ajp.port>
    <tomcat.rmi.port>9223</tomcat.rmi.port>
  </properties>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <!-- failsafe plugin runs integration tests in the 'integration-test' phase -->
        <executions>
          <execution>
            <id>integration-tests</id>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <testClassesDirectory>${project.build.outputDirectory}</testClassesDirectory>
          <testSourceDirectory>${project.build.sourceDirectory}</testSourceDirectory>
          <environmentVariables>
            <dhruvaHost>127.0.0.1</dhruvaHost>
            <testHost>127.0.0.1</testHost>
            <dhruvaSipTcpPort>5060</dhruvaSipTcpPort>
          </environmentVariables>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.codehaus.cargo</groupId>
        <artifactId>cargo-maven2-plugin</artifactId>
        <version>1.6.2</version>
        <configuration>
          <container>
            <containerId>tomcat9x</containerId>
            <zipUrlInstaller>
              <url>https://repo.maven.apache.org/maven2/org/apache/tomcat/tomcat/9.0.55/tomcat-9.0.55.zip</url>
            </zipUrlInstaller>
            <systemProperties>
              <!-- The following properties are required to disable the creation of redis cache (which is not needed for IT execution)
              i.e if we dont have a redis instance running, the app startup will fail -->
              <enableLettuceRedisDataSourceForUserToGroups>false</enableLettuceRedisDataSourceForUserToGroups>
              <enableLettuceRedisDataSourceForUserCache>false</enableLettuceRedisDataSourceForUserCache>
              <enableLettuceRedisDataSourceForOrgCache>false</enableLettuceRedisDataSourceForOrgCache>
              <enableLettuceRedisDataSourceForAuthCache>false</enableLettuceRedisDataSourceForAuthCache>
            </systemProperties>
          </container>
          <configuration>
            <type>standalone</type>
            <properties>
              <cargo.servlet.port>${tomcat.server.port}</cargo.servlet.port>
              <cargo.rmi.port>${tomcat.rmi.port}</cargo.rmi.port>
              <cargo.tomcat.ajp.port>${tomcat.ajp.port}</cargo.tomcat.ajp.port>
              <!--<cargo.jvmargs>
                  -javaagent:${user.home}/.m2/repository/org/jacoco/org.jacoco.agent/${jacoco.version}/org.jacoco.agent-${jacoco.version}-runtime.jar=destfile=${project.build.directory}/jacoco-it.exec,append=true
              </cargo.jvmargs>-->
            </properties>
          </configuration>
          <deployables>
            <deployable>
              <groupId>com.cisco</groupId>
              <artifactId>sample-app</artifactId>
              <type>war</type>
              <properties>
                <context>/</context>
              </properties>
              <pingUrlPath>/ping</pingUrlPath>
            </deployable>
          </deployables>
        </configuration>
        <executions>
          <execution>
            <id>start-container</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>start</goal>
            </goals>
            <configuration>
              <container>
                <timeout>180000</timeout>
              </container>
            </configuration>
          </execution>
          <execution>
            <id>stop-container</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>stop</goal>
            </goals>
            <configuration>
              <container>
                <timeout>180000</timeout>
              </container>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!--Create a shaded jar that contains the integration tests so they can be run independently from
          maven. By changing properties, like helloWorldApiUrl, the tests can be configured to run against
          different environments. E.g. integration, production and load test.-->
      <!--A simple test runner that is used to run JUnit based integration tests that have been shaded into a jar.-->
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <configuration>
          <mainClass>com.ciscospark.integration.TestNGRunner</mainClass>
          <finalName>dsb-FT</finalName>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>repackage</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>